{"version":3,"sources":["App.js","index.js"],"names":["audio","document","getElementById","App","props","state","breakCount","sessionCount","clockCount","currentTimer","isPlaying","handlePlayPause","clearInterval","loop","setState","setInterval","play","handleReset","pause","currentTime","convertToTime","count","minutes","Math","floor","seconds","handleLengthChange","timerType","newCount","toLowerCase","undefined","this","breakProps","title","handleDecrease","handleIncrease","sessionProps","className","id","onClick","React","Component","SetTimer","ReactDOM","render"],"mappings":"gPAIMA,EAAQC,SAASC,eAAe,QAChCC,E,kDASJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IATRC,MAAQ,CACNC,WAAY,EACZC,aAAc,GACdC,WAAY,KACZC,aAAc,UACdC,WAAW,GAGM,EASnBC,gBAAkB,WACM,EAAKN,MAAnBK,WAGNE,cAAc,EAAKC,MAEnB,EAAKC,SAAS,CACZJ,WAAW,MAGb,EAAKI,SAAS,CACZJ,WAAW,IAGb,EAAKG,KAAOE,aAAY,WAAO,IAAD,EAMxB,EAAKV,MAJPG,EAF0B,EAE1BA,WACAC,EAH0B,EAG1BA,aACAH,EAJ0B,EAI1BA,WACAC,EAL0B,EAK1BA,aAGgB,IAAfC,GACD,EAAKM,SAAS,CACZL,aAAgC,YAAjBA,EAA8B,QAAU,UACvDD,WAA8B,YAAjBC,EAA4C,GAAbH,EAAmC,GAAfC,IAGlEP,EAAMgB,QAEN,EAAKF,SAAS,CACZN,WAAYA,EAAa,MAI5B,OA5CY,EAgDnBS,YAAc,WACZ,EAAKH,SAAS,CACZR,WAAY,EACZC,aAAc,GACdC,WAAY,KACZC,aAAc,UACdC,WAAW,IAGbE,cAAc,EAAKC,MAEnBb,EAAMkB,QACNlB,EAAMmB,YAAc,GA5DH,EA+DnBC,cAAgB,SAACC,GACf,IAAIC,EAAUC,KAAKC,MAAMH,EAAQ,IAC7BI,EAAUJ,EAAQ,GAKtB,OAFAI,EAAUA,EAAU,GAAM,IAAIA,EAAWA,EAEnC,GAAN,OAHAH,EAAUA,EAAU,GAAM,IAAIA,EAAWA,EAGzC,YAAqBG,IAtEJ,EAyEnBC,mBAAqB,SAACL,EAAOM,GAAe,IAQtCC,EARqC,EAMrC,EAAKvB,MAJPE,EAFuC,EAEvCA,aACAD,EAHuC,EAGvCA,WACAI,EAJuC,EAIvCA,UACAD,EALuC,EAKvCA,cAMAmB,EADe,YAAdD,EACUpB,EAAec,EAEff,EAAae,GAGZ,GAAKO,EAAW,KAAOlB,IACnC,EAAKI,SAAL,yBACMa,EADN,SACyBC,IAGtBnB,EAAaoB,gBAAkBF,GAChC,EAAKb,SAAS,CACZN,WAAuB,GAAXoB,MA9FlB,EAAKf,UAAOiB,EAFK,E,wDAKnB,WACElB,cAAcmB,KAAKlB,Q,oBAoKrB,WAAU,IAAD,SAOHkB,KAAK1B,MALPC,EAFK,EAELA,WACAC,EAHK,EAGLA,aACAC,EAJK,EAILA,WACAC,EALK,EAKLA,aACAC,EANK,EAMLA,UAGIsB,EAAa,CACjBC,MAAO,QACPZ,MAAOf,EACP4B,eAAgB,kBAAM,EAAKR,oBAAoB,EAAG,UAClDS,eAAgB,kBAAM,EAAKT,mBAAmB,EAAG,WAG7CU,EAAe,CACnBH,MAAO,UACPZ,MAAOd,EACP2B,eAAgB,kBAAM,EAAKR,oBAAoB,EAAG,YAClDS,eAAgB,kBAAM,EAAKT,mBAAmB,EAAG,aAGnD,OACE,gCACE,sBAAKW,UAAU,OAAf,UACE,cAAC,EAAD,eAAcL,IACd,cAAC,EAAD,eAAcI,OAGhB,sBAAKC,UAAU,kBAAf,UACE,oBAAIC,GAAG,cAAP,SAAsB7B,IACtB,sBAAM6B,GAAG,YAAT,SAAsBP,KAAKX,cAAcZ,KAGzC,sBAAK6B,UAAU,OAAf,UACE,wBAAQC,GAAG,aAAaC,QAASR,KAAKpB,gBAAtC,SACE,mBAAG0B,UAAS,gBAAW3B,EAAY,QAAS,YAE9C,wBAAQ4B,GAAG,QAAQC,QAASR,KAAKd,YAAjC,SACE,mBAAGoB,UAAU,gC,GA3NTG,IAAMC,WAmOlBC,EAAW,SAACtC,GAChB,IAAMkC,EAAKlC,EAAM6B,MAAMJ,cAEvB,OACE,sBAAKQ,UAAU,kBAAf,UACE,qBAAIC,GAAE,UAAKA,EAAL,UAAN,UACGlC,EAAM6B,MADT,aAGA,sBAAKI,UAAU,uBAAf,UACE,wBAAQC,GAAE,UAAKA,EAAL,cAAqBC,QAASnC,EAAM8B,eAA9C,SACE,mBAAGG,UAAU,kBAGf,sBAAMC,GAAE,UAAKA,EAAL,WAAR,SAA2BlC,EAAMiB,QAEjC,wBAAQiB,GAAE,UAAKA,EAAL,cAAqBC,QAASnC,EAAM+B,eAA9C,SACE,mBAAGE,UAAU,wBAORlC,IC3PfwC,IAASC,OAAO,cAAC,EAAD,IAAS3C,SAASC,eAAe,W","file":"static/js/main.df859314.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst audio = document.getElementById(\"beep\");\r\nclass App extends React.Component {\r\n  state = {\r\n    breakCount: 5,\r\n    sessionCount: 25,\r\n    clockCount: 25 * 60,\r\n    currentTimer: 'Session',\r\n    isPlaying: false\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.loop = undefined;\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    clearInterval(this.loop);\r\n  }\r\n\r\n  handlePlayPause = () => {\r\n    const { isPlaying } = this.state;\r\n    \r\n    if(isPlaying) {\r\n      clearInterval(this.loop);\r\n      \r\n      this.setState({\r\n        isPlaying: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        isPlaying: true\r\n      });\r\n\r\n      this.loop = setInterval(() => {\r\n        const { \r\n          clockCount, \r\n          currentTimer, \r\n          breakCount, \r\n          sessionCount \r\n        } = this.state;\r\n        \r\n        if(clockCount === 0) {\r\n          this.setState({\r\n            currentTimer: (currentTimer === 'Session') ? 'Break' : 'Session',\r\n            clockCount: (currentTimer === 'Session') ? (breakCount * 60) : (sessionCount * 60)\r\n          });\r\n          \r\n          audio.play();\r\n        } else {\r\n          this.setState({\r\n            clockCount: clockCount - 1\r\n          });\r\n        }\r\n        \r\n      }, 1000);\r\n    }\r\n  }\r\n  \r\n  handleReset = () => {\r\n    this.setState({\r\n      breakCount: 5,\r\n      sessionCount: 25,\r\n      clockCount: 25 * 60,\r\n      currentTimer: 'Session',\r\n      isPlaying: false\r\n    });\r\n    \r\n    clearInterval(this.loop);\r\n    \r\n    audio.pause();\r\n    audio.currentTime = 0;\r\n  }\r\n\r\n  convertToTime = (count) => {\r\n    let minutes = Math.floor(count / 60);\r\n    let seconds = count % 60;\r\n      \r\n    minutes = minutes < 10 ? ('0'+minutes) : minutes;\r\n    seconds = seconds < 10 ? ('0'+seconds) : seconds;\r\n    \r\n    return `${minutes}:${seconds}`;\r\n  }\r\n  \r\n  handleLengthChange = (count, timerType) => {\r\n    const { \r\n      sessionCount, \r\n      breakCount, \r\n      isPlaying, \r\n      currentTimer\r\n    } = this.state;\r\n    \r\n    let newCount;\r\n    \r\n    if(timerType === 'session') {\r\n      newCount = sessionCount + count;\r\n    } else {\r\n      newCount = breakCount + count;\r\n    }\r\n    \r\n    if(newCount > 0 && newCount < 61 && !isPlaying) {\r\n      this.setState({\r\n        [`${timerType}Count`]: newCount\r\n      });\r\n      \r\n      if(currentTimer.toLowerCase() === timerType) {\r\n        this.setState({\r\n          clockCount: newCount * 60\r\n        })\r\n      }\r\n    }\r\n  }\r\n  \r\n//   handleBreakDecrease = () => {\r\n//     const { breakCount, isPlaying, currentTimer } = this.state;\r\n    \r\n//     if(breakCount > 1) {\r\n//       if(!isPlaying && currentTimer === 'Break') {\r\n//         this.setState({\r\n//           breakCount: breakCount - 1,\r\n//           clockCount: (breakCount - 1) * 60\r\n//         });\r\n//       } else {\r\n//         this.setState({\r\n//           breakCount: breakCount - 1,\r\n//         });\r\n//       }\r\n//     }\r\n//   }\r\n  \r\n//   handleBreakIncrease = () => {\r\n//     const { breakCount, isPlaying, currentTimer } = this.state;\r\n    \r\n//     if(breakCount < 60) {\r\n//       if(!isPlaying && currentTimer === 'Break') {\r\n//         this.setState({\r\n//           breakCount: breakCount + 1,\r\n//           clockCount: (breakCount + 1) * 60\r\n//         });\r\n//       } else {\r\n//         this.setState({\r\n//           breakCount: breakCount + 1,\r\n//         });\r\n//       }\r\n//     }\r\n//   }\r\n  \r\n//   handleSessionDecrease = () => {\r\n//     const { sessionCount, isPlaying, currentTimer } = this.state;\r\n    \r\n//     if(sessionCount > 1) {\r\n//       if(!isPlaying && currentTimer === 'Session') {\r\n//         this.setState({\r\n//           sessionCount: sessionCount - 1,\r\n//           clockCount: (sessionCount - 1) * 60\r\n//         });\r\n//       } else {\r\n//         this.setState({\r\n//           sessionCount: sessionCount - 1,\r\n//         });\r\n//       }\r\n//     }\r\n//   }\r\n  \r\n//   handleSessionIncrease = () => {\r\n//     const { sessionCount, isPlaying, currentTimer } = this.state;\r\n    \r\n//     if(sessionCount < 60) {\r\n//       if(!isPlaying && currentTimer === 'Session') {\r\n//         this.setState({\r\n//           sessionCount: sessionCount + 1,\r\n//           clockCount: (sessionCount + 1) * 60\r\n//         });\r\n//       } else {\r\n//         this.setState({\r\n//           sessionCount: sessionCount + 1,\r\n//         });\r\n//       }\r\n//     }\r\n//   }\r\n\r\n  render() {\r\n    const { \r\n      breakCount, \r\n      sessionCount, \r\n      clockCount, \r\n      currentTimer,\r\n      isPlaying\r\n    } = this.state;\r\n    \r\n    const breakProps = {\r\n      title: 'Break',\r\n      count: breakCount,\r\n      handleDecrease: () => this.handleLengthChange(-1, 'break'),\r\n      handleIncrease: () => this.handleLengthChange(1, 'break')\r\n    }\r\n    \r\n    const sessionProps = {\r\n      title: 'Session',\r\n      count: sessionCount,\r\n      handleDecrease: () => this.handleLengthChange(-1, 'session'),\r\n      handleIncrease: () => this.handleLengthChange(1, 'session'),\r\n    }\r\n    \r\n    return (\r\n      <div>\r\n        <div className=\"flex\">\r\n          <SetTimer {...breakProps} />\r\n          <SetTimer {...sessionProps} />\r\n        </div>\r\n        \r\n        <div className=\"clock-container\">\r\n          <h1 id=\"timer-label\">{currentTimer}</h1>\r\n          <span id=\"time-left\">{this.convertToTime(clockCount)}</span>\r\n          \r\n          \r\n          <div className=\"flex\">\r\n            <button id=\"start_stop\" onClick={this.handlePlayPause}>\r\n              <i className={`fa fa-${isPlaying ? 'pause': 'play'}`} />\r\n            </button>\r\n            <button id=\"reset\" onClick={this.handleReset}>\r\n              <i className=\"fa fa-repeat\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>);\r\n  }\r\n}\r\n\r\nconst SetTimer = (props) => {\r\n  const id = props.title.toLowerCase();\r\n  \r\n  return (\r\n    <div className=\"timer-container\">\r\n      <h2 id={`${id}-label`}>\r\n        {props.title} Length\r\n      </h2>\r\n      <div className=\"flex actions-wrapper\">\r\n        <button id={`${id}-decrement`} onClick={props.handleDecrease}>\r\n          <i className=\"fa fa-minus\" />\r\n        </button>\r\n        \r\n        <span id={`${id}-length`}>{props.count}</span>\r\n        \r\n        <button id={`${id}-increment`} onClick={props.handleIncrease}>\r\n          <i className=\"fa fa-plus\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}